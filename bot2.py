import os
import logging
import openai
import asyncio
import nest_asyncio
import re
import time

from telegram import Update
from telegram.ext import ApplicationBuilder, ContextTypes, MessageHandler, filters, CommandHandler

from dotenv import load_dotenv
from datetime import datetime
from history import user_histories, MAX_HISTORY_LENGTH, save_histories
from bot_buttons import get_main_reply_keyboard, get_main_inline_keyboard

from image_handler import handle_photo
from weather_handler import process_weather_message


load_dotenv()

print("Script started")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context) -> None:
    await update.message.reply_text(
        '–ü—Ä–∏–≤–µ—Ç! –Ø —á–∞—Ç-–±–æ—Ç. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?',
        reply_markup=get_main_reply_keyboard()
    )

#–õ–æ–≥–∏—Ä—É—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –æ—à–∏–±–∫–∏
logging.getLogger("httpx").setLevel(logging.WARNING)

# –õ–æ–≥–∏
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# Read API keys from environment variables
TELEGRAM_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
OPENROUTER_API_KEY = os.getenv('OPENROUTER_API_KEY')
AI_model = os.getenv('OPENROUTER_MODEL')

print(f"AI_model: {AI_model}")


if not TELEGRAM_TOKEN or not OPENROUTER_API_KEY:
    raise ValueError("Please set TELEGRAM_BOT_TOKEN and OPENROUTER_API_KEY environment variables.")

# Initialize OpenRouter client
client = openai.OpenAI(
    base_url="https://openrouter.ai/api/v1",
    api_key=OPENROUTER_API_KEY,
)

SYSTEM_PROMPT = "–¢—ã Telegram –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –í—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É. –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–µ–Ω–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–π —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫."

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≥–æ—Ä–æ–¥–æ–º ---
def extract_city_from_text(text):
    # –ò—â–µ–º —Å–ª–æ–≤–∞ –ø–æ—Å–ª–µ '–≤' –∏–ª–∏ '–ø–æ' –∏ –¥–æ –∫–æ–Ω—Ü–∞ —Å—Ç—Ä–æ–∫–∏/–∑–Ω–∞–∫–∞ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è
    match = re.search(r"(?:–≤|–ø–æ)\s+([–ê-–Ø–∞-—èA-Za-z\- ]+)", text)
    if match:
        return match.group(1).strip()
    return None

def get_last_city_from_history(history):
    for msg in reversed(history):
        if msg["role"] == "user":
            city = extract_city_from_text(msg["content"])
            if city:
                return city
    return None

weather_confirmation = {}

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message or not update.message.text or not update.message.from_user:
        return
    user_message = update.message.text
    user_id = update.message.from_user.id
    now = time.time()

    # –°–±—Ä–æ—Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–æ –∫–Ω–æ–ø–∫–µ
    if user_message.lower() == "—Å–±—Ä–æ—Å–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç":
        user_histories[user_id] = {
            "messages": [
                {"role": "system", "content": SYSTEM_PROMPT}
            ],
            "last_active": now
        }
        save_histories(user_histories)
        await update.message.reply_text("–ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–±—Ä–æ—à–µ–Ω!")
        return

    # --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–≥–æ–¥—ã —á–µ—Ä–µ–∑ weather_handler ---
    handled = await process_weather_message(update, user_message, user_id, SYSTEM_PROMPT)
    if handled:
        return

    # –ö–æ–Ω—Ç–µ–∫—Å—Ç
    if user_id not in user_histories:
        user_histories[user_id] = {
            "messages": [
                {"role": "system", "content": SYSTEM_PROMPT}
            ],
            "last_active": now
        }
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –æ –Ω–æ–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        try:
            user_name = update.effective_user.full_name if update.effective_user else str(user_id)
            await context.bot.send_message(chat_id=ADMIN_USER_ID, text=f"üë§ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_name} (id: {user_id})")
        except Exception:
            pass

    user_histories[user_id]["messages"].append({"role": "user", "content": user_message})
    user_histories[user_id]["last_active"] = now
    save_histories(user_histories)

    # --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–≥–æ–¥—ã —Å —É—Ç–æ—á–Ω–µ–Ω–∏–µ–º –≥–æ—Ä–æ–¥–∞ –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º ---
    weather_keywords = ["–ø–æ–≥–æ–¥–∞", "weather", "–¥–æ–∂–¥—å", "—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞", "–æ—Å–∞–¥–∫–∏", "—Å–æ–ª–Ω–µ—á–Ω–æ", "–æ–±–ª–∞—á–Ω–æ", "–≤–µ—Ç–µ—Ä"]
    if any(word in user_message.lower() for word in weather_keywords):
        city = extract_city_from_text(user_message)
        if not city:
            city = get_last_city_from_history(user_histories[user_id]["messages"])
            if not city:
                await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã.")
                return
            else:
                await update.message.reply_text(f"–ü–æ–≥–æ–¥–∞ –≤ {city}. –í—Å—ë –≤–µ—Ä–Ω–æ?")
                weather_confirmation[user_id] = city
                return
        else:
            await update.message.reply_text(f"–ü–æ–≥–æ–¥–∞ –≤ {city}. –í—Å—ë –≤–µ—Ä–Ω–æ?")
            weather_confirmation[user_id] = city
            return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å –æ –ø–æ–≥–æ–¥–µ
    weather_keywords = ["–ø–æ–≥–æ–¥–∞", "weather", "–¥–æ–∂–¥—å", "—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞", "–æ—Å–∞–¥–∫–∏", "—Å–æ–ª–Ω–µ—á–Ω–æ", "–æ–±–ª–∞—á–Ω–æ", "–≤–µ—Ç–µ—Ä"]
    if any(word in user_message.lower() for word in weather_keywords):
        today = datetime.now().strftime("%Y-%m-%d")
        user_histories[user_id]["messages"].append({
            "role": "system",
            "content": f"–°–µ–≥–æ–¥–Ω—è—à–Ω—è—è –¥–∞—Ç–∞: {today}. –ò—Å–ø–æ–ª—å–∑—É–π —ç—Ç—É –¥–∞—Ç—É –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ –ø–æ–≥–æ–¥–µ."
        })

    # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ MAX_HISTORY_LENGTH —Å–æ–æ–±—â–µ–Ω–∏–π (system prompt + –æ—Å—Ç–∞–ª—å–Ω—ã–µ)
    if len(user_histories[user_id]["messages"]) > MAX_HISTORY_LENGTH:
        user_histories[user_id]["messages"] = [user_histories[user_id]["messages"][0]] + user_histories[user_id]["messages"][-(MAX_HISTORY_LENGTH-1):]

    try:
        completion = client.chat.completions.create(
            extra_headers={
                # "HTTP-Referer": "<YOUR_SITE_URL>",  # Optional
                "X-Title": "<BOT>",      # Optional
            },
            extra_body={},
            model=AI_model,
            messages=user_histories[user_id]["messages"]
        )
        bot_reply = completion.choices[0].message.content.strip()
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é
        user_histories[user_id]["messages"].append({"role": "assistant", "content": bot_reply})
        user_histories[user_id]["last_active"] = now
        save_histories(user_histories)
    except Exception as e:
        logging.error(f"OpenRouter API error: {e}")
        if "rate limit" in str(e).lower() or "429" in str(e):
            bot_reply = "–õ–∏–º–∏—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –ò–ò –∏—Å—á–µ—Ä–ø–∞–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        else:
            bot_reply = "Sorry, I couldn't process your request."
        await update.message.reply_text(bot_reply)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π error handler
ADMIN_USER_ID = 420843521
async def error_handler(update, context):
    logging.error(msg := f"Exception while handling an update: {context.error}")
    try:
        if update and getattr(update, 'message', None):
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
        error_text = f"‚ùóÔ∏è –û—à–∏–±–∫–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {getattr(update.effective_user, 'id', 'N/A')}:\n{context.error}"
        await context.bot.send_message(chat_id=ADMIN_USER_ID, text=error_text)
    except Exception:
        pass

async def main():
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    # Handle all text messages
    app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), handle_message))
    app.add_handler(MessageHandler(filters.PHOTO, handle_photo))
    app.add_handler(CommandHandler("start", start))
    app.add_error_handler(error_handler)
    logging.info("Bot started.")
    await app.run_polling()

if __name__ == '__main__':
    import asyncio
    import nest_asyncio
    nest_asyncio.apply()
    loop = asyncio.get_event_loop()
    loop.run_until_complete(main())
        

print("Script started2")