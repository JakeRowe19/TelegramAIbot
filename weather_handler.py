import re
import os
import aiohttp
from dotenv import load_dotenv
from history import user_histories

load_dotenv()
WEATHERAPI_KEY = os.getenv('WEATHERAPI_KEY')

weather_confirmation = {}

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≥–æ—Ä–æ–¥–æ–º ---
def extract_city_from_text(text):
    match = re.search(r"(?:–≤|–ø–æ)\s+([–ê-–Ø–∞-—èA-Za-z\- ]+)", text)
    if match:
        return match.group(1).strip()
    return None

def get_last_city_from_history(history):
    for msg in reversed(history):
        if msg["role"] == "user":
            city = extract_city_from_text(msg["content"])
            if city:
                return city
    return None

def weather_emoji(description):
    desc = description.lower()
    if "—è—Å–Ω–æ" in desc or "—Å–æ–ª–Ω–µ—á–Ω–æ" in desc:
        return "‚òÄÔ∏è"
    if "–æ–±–ª–∞—á–Ω–æ" in desc or "–ø–∞—Å–º—É—Ä–Ω–æ" in desc:
        return "‚òÅÔ∏è"
    if "–¥–æ–∂–¥" in desc or "–ª–∏–≤–µ–Ω—å" in desc:
        return "üåßÔ∏è"
    if "–≥—Ä–æ–∑–∞" in desc:
        return "‚õàÔ∏è"
    if "—Å–Ω–µ–≥" in desc or "–º–µ—Ç–µ–ª—å" in desc:
        return "‚ùÑÔ∏è"
    if "—Ç—É–º–∞–Ω" in desc:
        return "üå´Ô∏è"
    if "–≤–µ—Ç–µ—Ä" in desc:
        return "üí®"
    if "–º–æ—Ä–æ–∑" in desc or "—Ö–æ–ª–æ–¥" in desc:
        return "ü•∂"
    if "—Ç–µ–ø–ª–æ" in desc or "–∂–∞—Ä–∫–æ" in desc:
        return "üå°Ô∏è"
    return "üåà"

async def get_weatherapi_weather(city, update=None):
    url = f"http://api.weatherapi.com/v1/current.json?key={WEATHERAPI_KEY}&q={city}&lang=ru"
    async with aiohttp.ClientSession() as session:
        async with session.get(url) as resp:
            data = await resp.json()
            if "current" in data:
                temp = data["current"]["temp_c"]
                descr = data["current"]["condition"]["text"]
                feels = data["current"]["feelslike_c"]
                emoji = weather_emoji(descr)
                text = f"{emoji} {descr.capitalize()}, {temp}¬∞C (–æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {feels}¬∞C)"
                return text
            elif "error" in data:
                return f"–û—à–∏–±–∫–∞: {data['error'].get('message', '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–≥–æ–¥—É.')}"
    return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–≥–æ–¥—É."

async def process_weather_message(update, user_message, user_id, SYSTEM_PROMPT):
    # --- –û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –≥–æ—Ä–æ–¥–∞ –ø–æ—Å–ª–µ –ø—Ä–æ—Å—å–±—ã ---
    if user_id in weather_confirmation and weather_confirmation[user_id] is None:
        city = user_message.strip()
        await update.message.reply_text(f"–ü–æ–≥–æ–¥–∞ –≤ {city}. –í—Å—ë –≤–µ—Ä–Ω–æ?")
        weather_confirmation[user_id] = city
        return True

    # --- –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –¥–ª—è –ø–æ–≥–æ–¥—ã ---
    if user_id in weather_confirmation and weather_confirmation[user_id] is not None:
        city = weather_confirmation[user_id]
        if user_message.lower() in ["–¥–∞", "–≤–µ—Ä–Ω–æ", "–¥–∞, –≤–µ—Ä–Ω–æ", "yes", "correct"]:
            result = await get_weatherapi_weather(city, update)
            if result:
                await update.message.reply_text(f"–ü–æ–≥–æ–¥–∞ –≤ {city}: {result}")
            del weather_confirmation[user_id]
            return True
        elif user_message.lower() in ["–Ω–µ—Ç", "no", "–Ω–µ –≤–µ—Ä–Ω–æ", "–Ω–µ–≤–µ—Ä–Ω–æ"]:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã.")
            weather_confirmation[user_id] = None
            return True

    # --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–≥–æ–¥—ã —Å —É—Ç–æ—á–Ω–µ–Ω–∏–µ–º –≥–æ—Ä–æ–¥–∞ –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º ---
    weather_keywords = ["–ø–æ–≥–æ–¥–∞", "weather", "–¥–æ–∂–¥—å", "—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞", "–æ—Å–∞–¥–∫–∏", "—Å–æ–ª–Ω–µ—á–Ω–æ", "–æ–±–ª–∞—á–Ω–æ", "–≤–µ—Ç–µ—Ä"]
    if any(word in user_message.lower() for word in weather_keywords):
        city = extract_city_from_text(user_message)
        if not city:
            history = user_histories.get(user_id, [])
            city = get_last_city_from_history(history)
            if not city:
                await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã.")
                weather_confirmation[user_id] = None
                return True
            else:
                await update.message.reply_text(f"–ü–æ–≥–æ–¥–∞ –≤ {city}. –í—Å—ë –≤–µ—Ä–Ω–æ?")
                weather_confirmation[user_id] = city
                return True
        else:
            await update.message.reply_text(f"–ü–æ–≥–æ–¥–∞ –≤ {city}. –í—Å—ë –≤–µ—Ä–Ω–æ?")
            weather_confirmation[user_id] = city
            return True
    return False 